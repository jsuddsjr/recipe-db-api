#!/usr/bin/env node

/**
 * Module dependencies.
 */
const http = require('node:http')
const process = require('node:process')
const debug = require('debug')('recipe-db-api:server')
const {initDb} = require('../db/connect.js')
const app = require('../app.js')

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || '3000')
app.set('port', port)

/**
 * Create HTTP server.
 */
const server = http.createServer(app)

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port)
server.on('error', onError)
server.on('listening', onListening)

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(value) {
	const port = Number.parseInt(value, 10)

	if (Number.isNaN(port)) {
		// Named pipe
		return value
	}

	if (port >= 0) {
		// Port number
		return port
	}

	return false
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
	if (error.syscall !== 'listen') {
		throw error
	}

	const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port

	// Handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES': {
			console.error(bind + ' requires elevated privileges')
			process.exit(1)
			break
		}

		case 'EADDRINUSE': {
			console.error(bind + ' is already in use')
			process.exit(1)
			break
		}

		default: {
			throw error
		}
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */
async function onListening() {
	const addr = server.address()
	const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port
	debug('Listening on ' + bind)

	initDb((error, db) => {
		if (error) {
			throw error
		} else {
			debug('Database connected.')
			db.connection.on('error', debug)
		}
	})
}
